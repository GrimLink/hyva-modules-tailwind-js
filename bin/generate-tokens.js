#!/usr/bin/env node

import fs from "node:fs/promises";
import path from "node:path";
import { cwd, exit } from "node:process";
import { consoleError, consoleWarn, getJsonFile } from "../src/utils/index.js";
import fromTokens from "../src/from-tokens.js";
import toStyleTokens from "../src/to-style.js";

const hyvaConfig = getJsonFile("hyva.config.json");
const hyvaConfigTokens = hyvaConfig?.tokens || {};

if (hyvaConfigTokens?.src && hyvaConfigTokens.src.startsWith("http")) {
    consoleError(
        "Design Tokens source must be a local path, external URLs are not allowed!"
    );
    exit(1);
}

if (hyvaConfigTokens?.src && hyvaConfigTokens?.values) {
    consoleWarn(
        "Design Tokens src and values cannot be both defined. ignoring src."
    );
}

const designTokensFile = hyvaConfigTokens?.src || "design.tokens.json";
if (
    hyvaConfigTokens?.src &&
    !hyvaConfigTokens.src.trim().toLowerCase().endsWith(".json")
) {
    consoleError(
        `Design Tokens src must be a JSON file. Received: '${hyvaConfigTokens.src}'`
    );
    exit(1);
}

const designTokens = hyvaConfigTokens?.values || getJsonFile(designTokensFile);
const tokensFormat = hyvaConfigTokens?.format || "figma";
const cssSelector = hyvaConfigTokens?.cssSelector || "@theme";

if (!designTokens) {
    exit(0);
}

if (typeof designTokens !== "object") {
    consoleError(
        `This is not a valid Design Tokens file/config.\nPlease ensure it contains a valid design tokens (JSON) format.`
    );
    exit(1);
}

const plainTokens = fromTokens(designTokens, tokensFormat);
const styleTokens = toStyleTokens(plainTokens, { selector: cssSelector });
const hyvaTokensCSS = `/**
 * This file is automatically generated.
 * Do not edit this file!
 */\n\n${styleTokens}\n`;

// Main async IIFE for top-level await clarity
(async () => {
    try {
        await fs.mkdir(path.join(cwd(), "generated"), { recursive: true });
        await fs.writeFile(
            path.join(cwd(), "generated/hyva-tokens.css"),
            hyvaTokensCSS
        );
    } catch (err) {
        consoleError(
            "Failed to generate hyva-tokens.css:\n" +
                (err && err.stack ? err.stack : err)
        );
        exit(1);
    }
})();
